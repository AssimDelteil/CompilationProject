type token =
  | MOD
  | REM
  | AND
  | OR
  | XOR
  | ABS
  | NOT
  | THEN
  | ELSE
  | LOOP
  | END
  | WHILE
  | FOR
  | REVERSE
  | IN
  | IF
  | ELSIF
  | CASE
  | WHEN
  | OTHERS
  | GOTO
  | EXIT
  | RETURN
  | RANGE
  | INTEGER
  | BOOLEAN
  | CONSTANT
  | TYPE
  | IS
  | SUBTYPE
  | RENAMES
  | PROCEDURE
  | OUT
  | FUNCTION
  | BEGIN
  | NULL
  | NEQ
  | LESSE
  | DEB_ETIQ
  | FIN_ETIQ
  | PUISS
  | GREATE
  | AFFECT
  | FLECHE
  | PP
  | COMM
  | PLUS
  | MOINS
  | DIV
  | FOIS
  | EQ
  | LESST
  | GREATT
  | LPAR
  | RPAR
  | VIR
  | PVIR
  | P
  | DP
  | SEP
  | EOL
  | CST_INT of (int)
  | CST_FLOAT of (float)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open File
# 72 "parser.ml"
let yytransl_const = [|
  257 (* MOD *);
  258 (* REM *);
  259 (* AND *);
  260 (* OR *);
  261 (* XOR *);
  262 (* ABS *);
  263 (* NOT *);
  264 (* THEN *);
  265 (* ELSE *);
  266 (* LOOP *);
  267 (* END *);
  268 (* WHILE *);
  269 (* FOR *);
  270 (* REVERSE *);
  271 (* IN *);
  272 (* IF *);
  273 (* ELSIF *);
  274 (* CASE *);
  275 (* WHEN *);
  276 (* OTHERS *);
  277 (* GOTO *);
  278 (* EXIT *);
  279 (* RETURN *);
  280 (* RANGE *);
  281 (* INTEGER *);
  282 (* BOOLEAN *);
  283 (* CONSTANT *);
  284 (* TYPE *);
  285 (* IS *);
  286 (* SUBTYPE *);
  287 (* RENAMES *);
  288 (* PROCEDURE *);
  289 (* OUT *);
  290 (* FUNCTION *);
  291 (* BEGIN *);
  292 (* NULL *);
  293 (* NEQ *);
  294 (* LESSE *);
  295 (* DEB_ETIQ *);
  296 (* FIN_ETIQ *);
  297 (* PUISS *);
  298 (* GREATE *);
  299 (* AFFECT *);
  300 (* FLECHE *);
  301 (* PP *);
  302 (* COMM *);
  303 (* PLUS *);
  304 (* MOINS *);
  305 (* DIV *);
  306 (* FOIS *);
  307 (* EQ *);
  308 (* LESST *);
  309 (* GREATT *);
  310 (* LPAR *);
  311 (* RPAR *);
  312 (* VIR *);
  313 (* PVIR *);
  314 (* P *);
  315 (* DP *);
  316 (* SEP *);
  317 (* EOL *);
    0|]

let yytransl_block = [|
  318 (* CST_INT *);
  319 (* CST_FLOAT *);
  320 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\004\000\002\000\002\000\002\000\001\000\
\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\025\000\
\026\000\027\000\000\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000"

let yysindex = "\004\000\
\052\000\000\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\000\000\255\254\000\000\000\000\196\255\086\000\052\000\
\052\000\212\255\048\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\196\255\196\255\052\000\106\000\052\000\106\000\106\000\
\029\000\029\000\000\000\029\000\196\255\196\255\196\255\196\255\
\029\000\029\000\029\000\106\000\106\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\255\069\255\000\000\039\255\000\000\088\255\093\255\
\174\255\202\255\000\000\227\255\081\255\109\255\134\255\162\255\
\247\255\011\000\031\000\098\255\187\255"

let yygindex = "\000\000\
\000\000\146\001"

let yytablesize = 440
let yytable = "\016\000\
\017\000\018\000\019\000\020\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\000\000\000\000\021\000\022\000\000\000\000\000\023\000\
\024\000\016\000\016\000\016\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\021\000\021\000\000\000\000\000\
\000\000\021\000\000\000\032\000\000\000\000\000\021\000\021\000\
\014\000\014\000\021\000\021\000\021\000\014\000\021\000\015\000\
\015\000\015\000\014\000\014\000\021\000\000\000\014\000\014\000\
\014\000\000\000\014\000\002\000\002\000\002\000\000\000\000\000\
\014\000\000\000\017\000\017\000\017\000\016\000\000\000\018\000\
\018\000\018\000\000\000\016\000\019\000\019\000\019\000\000\000\
\000\000\015\000\015\000\000\000\000\000\000\000\015\000\004\000\
\004\000\004\000\000\000\015\000\015\000\002\000\002\000\015\000\
\015\000\015\000\002\000\015\000\000\000\000\000\000\000\002\000\
\002\000\015\000\000\000\002\000\002\000\002\000\000\000\002\000\
\005\000\005\000\005\000\000\000\000\000\002\000\017\000\000\000\
\000\000\004\000\004\000\018\000\017\000\000\000\004\000\000\000\
\019\000\018\000\000\000\004\000\004\000\000\000\019\000\004\000\
\004\000\004\000\000\000\004\000\003\000\003\000\003\000\000\000\
\000\000\004\000\005\000\005\000\000\000\000\000\000\000\005\000\
\009\000\009\000\009\000\000\000\005\000\005\000\000\000\000\000\
\005\000\005\000\005\000\000\000\005\000\020\000\020\000\020\000\
\000\000\000\000\005\000\000\000\016\000\017\000\003\000\003\000\
\000\000\000\000\000\000\003\000\010\000\010\000\010\000\000\000\
\003\000\003\000\009\000\009\000\003\000\003\000\003\000\009\000\
\003\000\003\000\004\000\036\000\000\000\000\000\003\000\000\000\
\009\000\009\000\009\000\000\000\009\000\011\000\011\000\011\000\
\000\000\000\000\009\000\000\000\023\000\000\000\010\000\010\000\
\000\000\020\000\000\000\010\000\027\000\028\000\000\000\020\000\
\000\000\008\000\008\000\008\000\010\000\010\000\010\000\000\000\
\010\000\000\000\000\000\005\000\000\000\000\000\010\000\011\000\
\011\000\006\000\000\000\000\000\011\000\012\000\012\000\012\000\
\000\000\007\000\008\000\009\000\000\000\011\000\011\000\011\000\
\000\000\011\000\000\000\008\000\008\000\016\000\017\000\011\000\
\008\000\013\000\013\000\013\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\008\000\000\000\008\000\000\000\012\000\
\012\000\000\000\000\000\008\000\012\000\003\000\004\000\000\000\
\038\000\003\000\004\000\000\000\000\000\012\000\012\000\012\000\
\000\000\012\000\000\000\013\000\013\000\023\000\000\000\012\000\
\013\000\000\000\000\000\025\000\026\000\027\000\028\000\000\000\
\000\000\013\000\013\000\013\000\000\000\013\000\016\000\017\000\
\018\000\019\000\020\000\013\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\005\000\000\000\006\000\000\000\000\000\
\000\000\006\000\016\000\017\000\000\000\007\000\008\000\009\000\
\000\000\007\000\008\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\022\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\000\000\033\000\000\000\021\000\022\000\
\000\000\000\000\023\000\024\000\012\000\013\000\014\000\015\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\000\000\
\000\000\034\000\035\000\037\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\000\000\000\000\000\000\000\000\052\000\000\000\053\000"

let yycheck = "\001\001\
\002\001\003\001\004\001\005\001\001\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\003\001\004\001\
\005\001\255\255\255\255\037\001\038\001\255\255\255\255\041\001\
\042\001\003\001\004\001\005\001\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\037\001\038\001\255\255\255\255\
\255\255\042\001\255\255\061\001\255\255\255\255\047\001\048\001\
\037\001\038\001\051\001\052\001\053\001\042\001\055\001\003\001\
\004\001\005\001\047\001\048\001\061\001\255\255\051\001\052\001\
\053\001\255\255\055\001\003\001\004\001\005\001\255\255\255\255\
\061\001\255\255\003\001\004\001\005\001\055\001\255\255\003\001\
\004\001\005\001\255\255\061\001\003\001\004\001\005\001\255\255\
\255\255\037\001\038\001\255\255\255\255\255\255\042\001\003\001\
\004\001\005\001\255\255\047\001\048\001\037\001\038\001\051\001\
\052\001\053\001\042\001\055\001\255\255\255\255\255\255\047\001\
\048\001\061\001\255\255\051\001\052\001\053\001\255\255\055\001\
\003\001\004\001\005\001\255\255\255\255\061\001\055\001\255\255\
\255\255\037\001\038\001\055\001\061\001\255\255\042\001\255\255\
\055\001\061\001\255\255\047\001\048\001\255\255\061\001\051\001\
\052\001\053\001\255\255\055\001\003\001\004\001\005\001\255\255\
\255\255\061\001\037\001\038\001\255\255\255\255\255\255\042\001\
\003\001\004\001\005\001\255\255\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\255\255\055\001\003\001\004\001\005\001\
\255\255\255\255\061\001\255\255\001\001\002\001\037\001\038\001\
\255\255\255\255\255\255\042\001\003\001\004\001\005\001\255\255\
\047\001\048\001\037\001\038\001\051\001\052\001\053\001\042\001\
\055\001\006\001\007\001\008\001\255\255\255\255\061\001\255\255\
\051\001\052\001\053\001\255\255\055\001\003\001\004\001\005\001\
\255\255\255\255\061\001\255\255\041\001\255\255\037\001\038\001\
\255\255\055\001\255\255\042\001\049\001\050\001\255\255\061\001\
\255\255\003\001\004\001\005\001\051\001\052\001\053\001\255\255\
\055\001\255\255\255\255\048\001\255\255\255\255\061\001\037\001\
\038\001\054\001\255\255\255\255\042\001\003\001\004\001\005\001\
\255\255\062\001\063\001\064\001\255\255\051\001\052\001\053\001\
\255\255\055\001\255\255\037\001\038\001\001\001\002\001\061\001\
\042\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\053\001\255\255\055\001\255\255\037\001\
\038\001\255\255\255\255\061\001\042\001\006\001\007\001\255\255\
\009\001\006\001\007\001\255\255\255\255\051\001\052\001\053\001\
\255\255\055\001\255\255\037\001\038\001\041\001\255\255\061\001\
\042\001\255\255\255\255\047\001\048\001\049\001\050\001\255\255\
\255\255\051\001\052\001\053\001\255\255\055\001\001\001\002\001\
\003\001\004\001\005\001\061\001\255\255\255\255\255\255\048\001\
\255\255\255\255\255\255\048\001\255\255\054\001\255\255\255\255\
\255\255\054\001\001\001\002\001\255\255\062\001\063\001\064\001\
\255\255\062\001\063\001\064\001\255\255\255\255\255\255\255\255\
\255\255\255\255\037\001\038\001\255\255\255\255\041\001\042\001\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\255\255\037\001\038\001\
\255\255\255\255\041\001\042\001\003\000\004\000\005\000\006\000\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\255\255\255\255\255\255\255\255\036\000\255\255\038\000"

let yynames_const = "\
  MOD\000\
  REM\000\
  AND\000\
  OR\000\
  XOR\000\
  ABS\000\
  NOT\000\
  THEN\000\
  ELSE\000\
  LOOP\000\
  END\000\
  WHILE\000\
  FOR\000\
  REVERSE\000\
  IN\000\
  IF\000\
  ELSIF\000\
  CASE\000\
  WHEN\000\
  OTHERS\000\
  GOTO\000\
  EXIT\000\
  RETURN\000\
  RANGE\000\
  INTEGER\000\
  BOOLEAN\000\
  CONSTANT\000\
  TYPE\000\
  IS\000\
  SUBTYPE\000\
  RENAMES\000\
  PROCEDURE\000\
  OUT\000\
  FUNCTION\000\
  BEGIN\000\
  NULL\000\
  NEQ\000\
  LESSE\000\
  DEB_ETIQ\000\
  FIN_ETIQ\000\
  PUISS\000\
  GREATE\000\
  AFFECT\000\
  FLECHE\000\
  PP\000\
  COMM\000\
  PLUS\000\
  MOINS\000\
  DIV\000\
  FOIS\000\
  EQ\000\
  LESST\000\
  GREATT\000\
  LPAR\000\
  RPAR\000\
  VIR\000\
  PVIR\000\
  P\000\
  DP\000\
  SEP\000\
  EOL\000\
  "

let yynames_block = "\
  CST_INT\000\
  CST_FLOAT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 22 "parser.mly"
         (_1)
# 380 "parser.ml"
               : File.ast))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 25 "parser.mly"
              ( Plus(_1,_3) )
# 388 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 26 "parser.mly"
              ( Fois(_1,_3) )
# 396 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 27 "parser.mly"
               ( Moins(_1,_3) )
# 404 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 28 "parser.mly"
             ( Div(_1,_3) )
# 412 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 29 "parser.mly"
                 (_2)
# 419 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 30 "parser.mly"
               ( Puiss(_1,_3) )
# 427 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 31 "parser.mly"
            ( Eq(_1,_3) )
# 435 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 32 "parser.mly"
             ( Neq(_1,_3) )
# 443 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 33 "parser.mly"
               ( LessE(_1,_3) )
# 451 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 34 "parser.mly"
                ( GreatE(_1,_3) )
# 459 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 35 "parser.mly"
               ( LessT(_1,_3) )
# 467 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 36 "parser.mly"
                ( GreatT(_1,_3) )
# 475 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 37 "parser.mly"
             ( Mod(_1,_3) )
# 483 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 38 "parser.mly"
             ( Rem(_1,_3) )
# 491 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 39 "parser.mly"
             ( And(_1,_3) )
# 499 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 40 "parser.mly"
            ( Or(_1,_3) )
# 507 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 41 "parser.mly"
             ( Xor(_1,_3) )
# 515 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 42 "parser.mly"
                  ( AndThen(_1,_4) )
# 523 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 43 "parser.mly"
                 ( OrElse(_1,_4) )
# 531 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 44 "parser.mly"
             ( Nega(_2) )
# 538 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 45 "parser.mly"
           ( Abs(_2) )
# 545 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 46 "parser.mly"
            ( Not(_2) )
# 552 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 47 "parser.mly"
             ( Int(_1) )
# 559 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 48 "parser.mly"
               ( Float(_1) )
# 566 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
        ( Id(_1) )
# 573 "parser.ml"
               : 'e))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : File.ast)
