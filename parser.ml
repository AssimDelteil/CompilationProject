type token =
  | MOD
  | REM
  | AND
  | OR
  | XOR
  | ABS
  | NOT
  | THEN
  | ELSE
  | LOOP
  | END
  | WHILE
  | FOR
  | REVERSE
  | IN
  | IF
  | ELSIF
  | CASE
  | WHEN
  | OTHERS
  | GOTO
  | EXIT
  | RETURN
  | RANGE
  | INTEGER
  | BOOLEAN
  | CONSTANT
  | TYPE
  | IS
  | SUBTYPE
  | RENAMES
  | PROCEDURE
  | OUT
  | FUNCTION
  | BEGIN
  | NULL
  | NEQ
  | LESSE
  | DEB_ETIQ
  | FIN_ETIQ
  | PUISS
  | GREATE
  | AFFECT
  | FLECHE
  | PP
  | COMMENTAIRE
  | PLUS
  | MOINS
  | DIV
  | FOIS
  | EQ
  | LESST
  | GREATT
  | LPAR
  | RPAR
  | VIR
  | PVIR
  | P
  | DP
  | SEP
  | EOF
  | EOL
  | CST_FLOAT of (float)
  | CST_INT of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open File
# 73 "parser.ml"
let yytransl_const = [|
  257 (* MOD *);
  258 (* REM *);
  259 (* AND *);
  260 (* OR *);
  261 (* XOR *);
  262 (* ABS *);
  263 (* NOT *);
  264 (* THEN *);
  265 (* ELSE *);
  266 (* LOOP *);
  267 (* END *);
  268 (* WHILE *);
  269 (* FOR *);
  270 (* REVERSE *);
  271 (* IN *);
  272 (* IF *);
  273 (* ELSIF *);
  274 (* CASE *);
  275 (* WHEN *);
  276 (* OTHERS *);
  277 (* GOTO *);
  278 (* EXIT *);
  279 (* RETURN *);
  280 (* RANGE *);
  281 (* INTEGER *);
  282 (* BOOLEAN *);
  283 (* CONSTANT *);
  284 (* TYPE *);
  285 (* IS *);
  286 (* SUBTYPE *);
  287 (* RENAMES *);
  288 (* PROCEDURE *);
  289 (* OUT *);
  290 (* FUNCTION *);
  291 (* BEGIN *);
  292 (* NULL *);
  293 (* NEQ *);
  294 (* LESSE *);
  295 (* DEB_ETIQ *);
  296 (* FIN_ETIQ *);
  297 (* PUISS *);
  298 (* GREATE *);
  299 (* AFFECT *);
  300 (* FLECHE *);
  301 (* PP *);
  302 (* COMMENTAIRE *);
  303 (* PLUS *);
  304 (* MOINS *);
  305 (* DIV *);
  306 (* FOIS *);
  307 (* EQ *);
  308 (* LESST *);
  309 (* GREATT *);
  310 (* LPAR *);
  311 (* RPAR *);
  312 (* VIR *);
  313 (* PVIR *);
  314 (* P *);
  315 (* DP *);
  316 (* SEP *);
    0 (* EOF *);
  317 (* EOL *);
    0|]

let yytransl_block = [|
  318 (* CST_FLOAT *);
  319 (* CST_INT *);
  320 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\003\000\003\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\008\000\008\000\009\000\009\000\010\000\010\000\011\000\
\011\000\011\000\012\000\012\000\013\000\014\000\014\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\015\000\015\000\016\000\016\000\016\000\016\000\017\000\017\000\
\017\000\017\000\018\000\018\000\019\000\019\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\006\000\005\000\001\000\002\000\001\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\002\000\002\000\002\000\001\000\001\000\001\000\
\004\000\001\000\003\000\001\000\003\000\004\000\005\000\001\000\
\003\000\001\000\001\000\003\000\004\000\001\000\002\000\005\000\
\007\000\006\000\010\000\012\000\015\000\014\000\011\000\012\000\
\013\000\010\000\010\000\006\000\008\000\005\000\005\000\006\000\
\001\000\003\000\003\000\002\000\002\000\001\000\000\000\001\000\
\001\000\002\000\004\000\006\000\001\000\002\000\005\000\003\000\
\008\000\009\000\006\000\006\000\003\000\008\000\005\000\011\000\
\008\000\013\000\010\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\092\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\000\000\000\000\000\000\005\000\066\000\002\000\
\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\000\000\000\000\031\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\073\000\000\000\000\000\084\000\000\000\000\000\000\000\000\000\
\000\000\062\000\000\000\063\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\050\000\033\000\000\000\000\000\
\081\000\000\000\078\000\089\000\000\000\000\000\000\000\000\000\
\086\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\035\000\082\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000\000\000\000\000\058\000\
\000\000\000\000\000\000\045\000\059\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\000\000\090\000\056\000\039\000\000\000\052\000\000\000\
\000\000\057\000\000\000\000\000\000\000\054\000\053\000"

let yydgoto = "\002\000\
\004\000\005\000\015\000\023\000\024\000\016\000\123\000\124\000\
\211\000\199\000\181\000\182\000\183\000\184\000\017\000\029\000\
\106\000\049\000\149\000"

let yysindex = "\012\000\
\245\254\000\000\219\254\000\000\033\000\007\255\000\000\051\255\
\234\254\033\255\045\255\058\255\052\255\070\255\102\255\074\255\
\083\255\118\255\120\255\236\254\241\254\087\255\000\000\052\255\
\088\255\052\255\000\000\252\254\041\255\129\255\090\255\074\255\
\088\255\000\000\091\255\088\255\116\255\000\000\000\000\000\000\
\093\255\131\255\244\255\000\000\244\255\140\255\134\255\107\255\
\122\255\239\254\133\255\249\255\000\000\128\255\244\255\244\255\
\244\255\244\255\000\000\000\000\139\255\012\003\074\004\244\255\
\052\255\248\254\014\255\074\255\000\000\172\255\244\255\244\255\
\132\255\009\255\082\255\142\255\057\255\146\255\000\000\000\000\
\027\255\002\004\244\255\244\255\244\255\117\255\191\255\244\255\
\244\255\244\255\244\255\244\255\244\255\244\255\244\255\244\255\
\244\255\244\255\244\255\000\000\244\255\127\004\194\255\173\255\
\000\000\143\255\074\255\000\000\176\255\144\255\144\004\197\004\
\155\255\000\000\198\255\000\000\036\003\000\000\052\255\244\255\
\149\255\244\255\241\003\157\255\000\000\000\000\165\255\027\255\
\027\255\244\255\129\001\244\255\129\001\129\001\126\255\126\255\
\000\000\126\255\027\255\027\255\027\255\027\255\126\255\126\255\
\126\255\093\003\244\255\160\255\164\255\000\000\170\255\200\255\
\052\255\036\255\052\255\195\255\000\000\244\255\000\000\229\255\
\214\004\227\255\110\003\244\255\000\000\000\000\129\001\129\001\
\000\000\167\003\000\000\000\000\088\255\052\255\194\255\074\255\
\000\000\123\255\000\000\011\005\184\255\202\255\195\255\236\255\
\184\003\238\255\052\255\255\255\000\000\000\000\000\000\000\000\
\194\255\199\255\217\255\052\255\247\255\244\255\063\255\244\255\
\195\255\052\255\000\000\246\255\000\000\196\255\006\000\016\000\
\139\255\028\005\009\000\219\255\000\000\052\255\010\000\223\255\
\081\005\052\255\011\000\098\005\000\000\225\255\230\255\231\255\
\015\000\018\000\244\255\052\255\000\000\194\255\014\000\000\000\
\052\255\026\000\240\255\000\000\000\000\000\000\235\255\052\255\
\098\005\028\000\243\255\245\255\031\000\029\000\000\000\248\255\
\043\000\045\000\000\000\000\000\000\000\003\000\000\000\046\000\
\005\000\000\000\008\000\019\000\020\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\053\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\255\060\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\181\255\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\255\000\000\000\000\000\000\000\000\121\000\
\179\000\000\000\030\000\000\000\135\000\193\000\213\001\015\002\
\000\000\073\002\237\000\039\001\097\001\155\001\131\002\189\002\
\247\002\000\000\000\000\027\000\000\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\000\053\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\226\254\021\000\000\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\000\000\000\000\000\000\103\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\250\255\232\255\000\000\000\000\216\255\179\255\
\142\000\106\000\000\000\151\000\000\000\170\000\242\255\000\000\
\000\000\224\255\101\255"

let yytablesize = 1687
let yytable = "\038\000\
\004\000\040\000\062\000\051\000\063\000\127\000\104\000\035\000\
\032\000\027\000\039\000\068\000\001\000\040\000\079\000\080\000\
\081\000\082\000\048\000\194\000\003\000\048\000\041\000\102\000\
\105\000\047\000\006\000\084\000\085\000\040\000\111\000\112\000\
\007\000\033\000\117\000\008\000\034\000\212\000\036\000\069\000\
\103\000\018\000\107\000\128\000\129\000\131\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\140\000\141\000\142\000\
\143\000\144\000\145\000\042\000\146\000\109\000\055\000\056\000\
\176\000\114\000\119\000\091\000\120\000\121\000\108\000\218\000\
\115\000\219\000\243\000\095\000\096\000\041\000\009\000\161\000\
\010\000\163\000\011\000\043\000\012\000\013\000\190\000\055\000\
\056\000\167\000\022\000\168\000\177\000\041\000\160\000\070\000\
\019\000\044\000\068\000\122\000\152\000\009\000\069\000\010\000\
\057\000\011\000\170\000\012\000\020\000\070\000\058\000\038\000\
\068\000\038\000\014\000\180\000\069\000\185\000\059\000\060\000\
\061\000\021\000\055\000\056\000\130\000\025\000\084\000\085\000\
\175\000\057\000\178\000\196\000\034\000\197\000\034\000\058\000\
\026\000\014\000\116\000\198\000\192\000\028\000\180\000\059\000\
\060\000\061\000\030\000\210\000\031\000\193\000\037\000\014\000\
\045\000\046\000\050\000\052\000\053\000\217\000\048\000\220\000\
\180\000\054\000\207\000\064\000\057\000\066\000\091\000\210\000\
\065\000\195\000\058\000\215\000\093\000\094\000\095\000\096\000\
\067\000\222\000\059\000\060\000\061\000\032\000\032\000\032\000\
\032\000\032\000\241\000\070\000\032\000\230\000\032\000\078\000\
\083\000\234\000\110\000\113\000\055\000\056\000\118\000\132\000\
\055\000\056\000\125\000\242\000\148\000\150\000\151\000\154\000\
\245\000\032\000\153\000\157\000\162\000\165\000\179\000\249\000\
\158\000\032\000\032\000\166\000\172\000\032\000\032\000\171\000\
\032\000\032\000\173\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\174\000\032\000\032\000\032\000\057\000\186\000\
\032\000\188\000\057\000\201\000\058\000\202\000\204\000\206\000\
\058\000\055\000\056\000\214\000\059\000\060\000\061\000\213\000\
\059\000\060\000\061\000\224\000\055\000\056\000\216\000\223\000\
\071\000\004\000\072\000\004\000\208\000\073\000\074\000\075\000\
\225\000\004\000\228\000\229\000\231\000\055\000\056\000\232\000\
\239\000\236\000\235\000\240\000\076\000\244\000\237\000\238\000\
\022\000\022\000\022\000\057\000\246\000\022\000\250\000\022\000\
\247\000\058\000\248\000\251\000\254\000\252\000\057\000\198\000\
\255\000\059\000\060\000\061\000\058\000\000\001\001\001\003\001\
\077\000\004\000\022\000\002\001\059\000\060\000\209\000\057\000\
\043\000\027\000\027\000\027\000\004\001\058\000\027\000\005\001\
\027\000\022\000\022\000\006\001\007\001\059\000\060\000\209\000\
\065\000\006\000\046\000\077\000\022\000\022\000\022\000\071\000\
\072\000\022\000\075\000\027\000\037\000\226\000\253\000\221\000\
\203\000\000\000\000\000\027\000\027\000\000\000\000\000\000\000\
\027\000\000\000\027\000\027\000\000\000\027\000\027\000\000\000\
\000\000\027\000\027\000\027\000\000\000\027\000\027\000\027\000\
\000\000\000\000\027\000\020\000\020\000\020\000\000\000\000\000\
\020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\000\000\000\000\023\000\000\000\
\023\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\020\000\000\000\
\000\000\000\000\020\000\023\000\020\000\020\000\000\000\020\000\
\020\000\000\000\000\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\023\000\023\000\020\000\021\000\021\000\021\000\
\000\000\000\000\021\000\000\000\021\000\023\000\023\000\023\000\
\000\000\000\000\023\000\024\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\021\000\000\000\000\000\000\000\021\000\024\000\021\000\021\000\
\000\000\021\000\021\000\000\000\000\000\021\000\021\000\021\000\
\000\000\021\000\021\000\021\000\024\000\024\000\021\000\008\000\
\008\000\008\000\000\000\000\000\008\000\000\000\008\000\024\000\
\024\000\024\000\000\000\000\000\024\000\025\000\025\000\025\000\
\000\000\000\000\025\000\000\000\025\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\000\000\000\000\000\000\008\000\025\000\
\008\000\008\000\000\000\008\000\008\000\000\000\000\000\008\000\
\008\000\008\000\000\000\008\000\008\000\008\000\025\000\025\000\
\008\000\010\000\010\000\010\000\000\000\000\000\010\000\000\000\
\010\000\025\000\025\000\025\000\000\000\000\000\025\000\026\000\
\026\000\026\000\000\000\000\000\026\000\000\000\026\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\010\000\000\000\000\000\000\000\
\010\000\026\000\010\000\010\000\000\000\010\000\010\000\000\000\
\000\000\010\000\010\000\010\000\000\000\010\000\010\000\010\000\
\026\000\026\000\010\000\011\000\011\000\011\000\000\000\000\000\
\011\000\000\000\011\000\026\000\026\000\026\000\000\000\000\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\084\000\085\000\000\000\000\000\011\000\011\000\000\000\
\000\000\000\000\011\000\000\000\011\000\011\000\000\000\011\000\
\011\000\000\000\000\000\011\000\011\000\011\000\000\000\011\000\
\011\000\011\000\000\000\000\000\011\000\009\000\009\000\009\000\
\000\000\000\000\009\000\000\000\009\000\089\000\090\000\000\000\
\000\000\091\000\092\000\000\000\000\000\000\000\000\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\009\000\000\000\000\000\000\000\009\000\000\000\009\000\009\000\
\000\000\009\000\009\000\000\000\000\000\009\000\009\000\009\000\
\000\000\009\000\009\000\009\000\000\000\000\000\009\000\015\000\
\015\000\015\000\000\000\000\000\015\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\015\000\000\000\000\000\000\000\015\000\000\000\
\015\000\015\000\000\000\000\000\000\000\000\000\000\000\015\000\
\015\000\015\000\000\000\015\000\015\000\015\000\000\000\000\000\
\015\000\016\000\016\000\016\000\000\000\000\000\016\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\016\000\000\000\000\000\000\000\
\016\000\000\000\016\000\016\000\000\000\000\000\000\000\000\000\
\000\000\016\000\016\000\016\000\000\000\016\000\016\000\016\000\
\000\000\000\000\016\000\017\000\017\000\017\000\000\000\000\000\
\017\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\017\000\000\000\
\000\000\000\000\017\000\000\000\017\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\017\000\017\000\000\000\017\000\
\017\000\017\000\000\000\000\000\017\000\014\000\014\000\014\000\
\000\000\000\000\014\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\014\000\000\000\000\000\000\000\014\000\000\000\014\000\014\000\
\000\000\000\000\000\000\000\000\000\000\014\000\014\000\014\000\
\000\000\014\000\014\000\014\000\000\000\000\000\014\000\018\000\
\018\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\000\000\000\000\000\000\018\000\000\000\
\018\000\018\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\018\000\000\000\018\000\018\000\018\000\000\000\000\000\
\018\000\019\000\019\000\019\000\000\000\000\000\019\000\000\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\085\000\086\000\087\000\
\088\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\019\000\000\000\000\000\000\000\
\019\000\000\000\019\000\019\000\084\000\085\000\086\000\087\000\
\088\000\019\000\019\000\019\000\000\000\019\000\019\000\019\000\
\089\000\090\000\019\000\000\000\091\000\092\000\000\000\000\000\
\000\000\000\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\
\089\000\090\000\000\000\000\000\091\000\092\000\000\000\000\000\
\000\000\000\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\000\000\000\000\000\000\159\000\084\000\085\000\086\000\
\087\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\000\090\000\000\000\000\000\091\000\092\000\000\000\
\000\000\000\000\000\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\089\000\090\000\000\000\169\000\091\000\092\000\
\000\000\000\000\000\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\000\000\000\000\000\000\189\000\084\000\
\085\000\086\000\087\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\085\000\086\000\087\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\000\090\000\000\000\000\000\091\000\
\092\000\000\000\000\000\000\000\000\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\089\000\090\000\000\000\191\000\
\091\000\092\000\000\000\000\000\000\000\000\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\000\000\000\000\000\000\
\205\000\084\000\085\000\086\000\087\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\085\000\086\000\087\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\090\000\000\000\
\000\000\091\000\092\000\000\000\000\000\000\000\000\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\089\000\090\000\
\164\000\000\000\091\000\092\000\000\000\000\000\000\000\000\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\000\000\
\126\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\085\000\086\000\087\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\032\000\000\000\
\000\000\032\000\032\000\000\000\000\000\032\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\089\000\090\000\
\000\000\000\000\091\000\092\000\000\000\000\000\101\000\000\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\084\000\
\085\000\086\000\087\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\085\000\086\000\087\000\088\000\000\000\000\000\155\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\000\090\000\000\000\000\000\091\000\
\092\000\000\000\000\000\147\000\000\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\089\000\090\000\000\000\000\000\
\091\000\092\000\000\000\000\000\000\000\000\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\084\000\085\000\086\000\
\087\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\000\000\000\000\000\000\000\000\187\000\
\000\000\156\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\000\090\000\000\000\000\000\091\000\092\000\000\000\
\000\000\000\000\000\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\089\000\090\000\000\000\000\000\091\000\092\000\
\000\000\000\000\000\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\084\000\085\000\086\000\087\000\088\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\085\000\086\000\087\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
\090\000\000\000\000\000\091\000\092\000\000\000\000\000\200\000\
\000\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\089\000\090\000\000\000\000\000\091\000\092\000\000\000\000\000\
\227\000\000\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\084\000\085\000\086\000\087\000\088\000\000\000\000\000\
\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\084\000\085\000\086\000\087\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\090\000\000\000\
\000\000\091\000\092\000\000\000\000\000\000\000\000\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\089\000\090\000\
\000\000\000\000\091\000\092\000\000\000\000\000\000\000\000\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000"

let yycheck = "\024\000\
\000\000\026\000\043\000\036\000\045\000\083\000\015\001\023\001\
\029\001\016\000\025\000\029\001\001\000\044\001\055\000\056\000\
\057\000\058\000\033\000\175\000\032\001\036\000\027\001\064\000\
\033\001\032\000\064\001\001\001\002\001\060\001\071\000\072\000\
\000\000\054\001\075\000\029\001\057\001\193\000\054\001\057\001\
\065\000\064\001\029\001\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\064\001\101\000\068\000\006\001\007\001\
\029\001\057\001\010\001\041\001\012\001\013\001\057\001\009\001\
\064\001\011\001\230\000\049\001\050\001\044\001\028\001\120\000\
\030\001\122\000\032\001\043\001\034\001\035\001\164\000\006\001\
\007\001\130\000\039\001\132\000\057\001\060\001\119\000\043\001\
\064\001\057\001\043\001\043\001\107\000\028\001\043\001\030\001\
\048\001\032\001\147\000\034\001\064\001\057\001\054\001\009\001\
\057\001\011\001\064\001\156\000\057\001\158\000\062\001\063\001\
\064\001\064\001\006\001\007\001\008\001\056\001\001\001\002\001\
\153\000\048\001\155\000\009\001\055\001\011\001\057\001\054\001\
\035\001\064\001\057\001\017\001\173\000\059\001\183\000\062\001\
\063\001\064\001\029\001\188\000\029\001\174\000\064\001\064\001\
\024\001\064\001\064\001\040\001\064\001\198\000\173\000\200\000\
\201\000\031\001\187\000\024\001\048\001\059\001\041\001\208\000\
\035\001\176\000\054\001\196\000\047\001\048\001\049\001\050\001\
\055\001\202\000\062\001\063\001\064\001\001\001\002\001\003\001\
\004\001\005\001\227\000\055\001\008\001\214\000\010\001\064\001\
\054\001\218\000\023\001\064\001\006\001\007\001\057\001\009\001\
\006\001\007\001\057\001\228\000\011\001\033\001\064\001\064\001\
\233\000\029\001\035\001\057\001\064\001\057\001\020\001\240\000\
\019\001\037\001\038\001\055\001\057\001\041\001\042\001\064\001\
\044\001\045\001\057\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\035\001\055\001\056\001\057\001\048\001\011\001\
\060\001\015\001\048\001\060\001\054\001\044\001\011\001\010\001\
\054\001\006\001\007\001\035\001\062\001\063\001\064\001\057\001\
\062\001\063\001\064\001\064\001\006\001\007\001\016\001\018\001\
\016\001\009\001\018\001\011\001\014\001\021\001\022\001\023\001\
\011\001\017\001\010\001\057\001\011\001\006\001\007\001\057\001\
\010\001\057\001\016\001\010\001\036\001\016\001\057\001\057\001\
\003\001\004\001\005\001\048\001\011\001\008\001\011\001\010\001\
\057\001\054\001\064\001\057\001\016\001\057\001\048\001\017\001\
\057\001\062\001\063\001\064\001\054\001\011\001\010\001\010\001\
\064\001\057\001\029\001\057\001\062\001\063\001\064\001\048\001\
\044\001\003\001\004\001\005\001\064\001\054\001\008\001\064\001\
\010\001\044\001\045\001\057\001\057\001\062\001\063\001\064\001\
\059\001\035\001\011\001\057\001\055\001\056\001\057\001\064\001\
\064\001\060\001\055\001\029\001\010\001\208\000\245\000\201\000\
\183\000\255\255\255\255\037\001\038\001\255\255\255\255\255\255\
\042\001\255\255\044\001\045\001\255\255\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\255\255\255\255\060\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\255\255\255\255\042\001\029\001\044\001\045\001\255\255\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\044\001\045\001\060\001\003\001\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\055\001\056\001\057\001\
\255\255\255\255\060\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\255\255\255\255\042\001\029\001\044\001\045\001\
\255\255\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\044\001\045\001\060\001\003\001\
\004\001\005\001\255\255\255\255\008\001\255\255\010\001\055\001\
\056\001\057\001\255\255\255\255\060\001\003\001\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\255\255\255\255\255\255\042\001\029\001\
\044\001\045\001\255\255\047\001\048\001\255\255\255\255\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\044\001\045\001\
\060\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\055\001\056\001\057\001\255\255\255\255\060\001\003\001\
\004\001\005\001\255\255\255\255\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\255\255\
\042\001\029\001\044\001\045\001\255\255\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\044\001\045\001\060\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\055\001\056\001\057\001\255\255\255\255\
\060\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\037\001\038\001\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\255\255\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\255\255\060\001\003\001\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\037\001\038\001\255\255\
\255\255\041\001\042\001\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\255\255\255\255\042\001\255\255\044\001\045\001\
\255\255\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\003\001\
\004\001\005\001\255\255\255\255\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\255\255\255\255\255\255\042\001\255\255\
\044\001\045\001\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\255\255\
\060\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\255\255\
\042\001\255\255\044\001\045\001\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\255\255\255\255\060\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\255\255\055\001\
\056\001\057\001\255\255\255\255\060\001\003\001\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\255\255\255\255\042\001\255\255\044\001\045\001\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\255\255\055\001\056\001\057\001\255\255\255\255\060\001\003\001\
\004\001\005\001\255\255\255\255\008\001\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\255\255\255\255\255\255\042\001\255\255\
\044\001\045\001\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\255\255\255\255\
\060\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\255\255\
\042\001\255\255\044\001\045\001\001\001\002\001\003\001\004\001\
\005\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\037\001\038\001\060\001\255\255\041\001\042\001\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\255\255\057\001\255\255\255\255\255\255\
\037\001\038\001\255\255\255\255\041\001\042\001\255\255\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\255\255\057\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\255\255\255\255\041\001\042\001\255\255\
\255\255\255\255\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\037\001\038\001\255\255\057\001\041\001\042\001\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\255\255\057\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\041\001\
\042\001\255\255\255\255\255\255\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\037\001\038\001\255\255\057\001\
\041\001\042\001\255\255\255\255\255\255\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\255\255\255\255\
\057\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\255\255\041\001\042\001\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\037\001\038\001\
\056\001\255\255\041\001\042\001\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\255\255\041\001\042\001\255\255\255\255\045\001\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\037\001\038\001\
\255\255\255\255\041\001\042\001\255\255\255\255\045\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\041\001\
\042\001\255\255\255\255\045\001\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\037\001\038\001\255\255\255\255\
\041\001\042\001\255\255\255\255\255\255\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\255\255\255\255\041\001\042\001\255\255\
\255\255\255\255\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\037\001\038\001\255\255\255\255\041\001\042\001\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\255\255\041\001\042\001\255\255\255\255\045\001\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\037\001\038\001\255\255\255\255\041\001\042\001\255\255\255\255\
\045\001\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\255\255\041\001\042\001\255\255\255\255\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\037\001\038\001\
\255\255\255\255\041\001\042\001\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001"

let yynames_const = "\
  MOD\000\
  REM\000\
  AND\000\
  OR\000\
  XOR\000\
  ABS\000\
  NOT\000\
  THEN\000\
  ELSE\000\
  LOOP\000\
  END\000\
  WHILE\000\
  FOR\000\
  REVERSE\000\
  IN\000\
  IF\000\
  ELSIF\000\
  CASE\000\
  WHEN\000\
  OTHERS\000\
  GOTO\000\
  EXIT\000\
  RETURN\000\
  RANGE\000\
  INTEGER\000\
  BOOLEAN\000\
  CONSTANT\000\
  TYPE\000\
  IS\000\
  SUBTYPE\000\
  RENAMES\000\
  PROCEDURE\000\
  OUT\000\
  FUNCTION\000\
  BEGIN\000\
  NULL\000\
  NEQ\000\
  LESSE\000\
  DEB_ETIQ\000\
  FIN_ETIQ\000\
  PUISS\000\
  GREATE\000\
  AFFECT\000\
  FLECHE\000\
  PP\000\
  COMMENTAIRE\000\
  PLUS\000\
  MOINS\000\
  DIV\000\
  FOIS\000\
  EQ\000\
  LESST\000\
  GREATT\000\
  LPAR\000\
  RPAR\000\
  VIR\000\
  PVIR\000\
  P\000\
  DP\000\
  SEP\000\
  EOF\000\
  EOL\000\
  "

let yynames_block = "\
  CST_FLOAT\000\
  CST_INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 's_prime) in
    Obj.repr(
# 25 "parser.mly"
             (_1)
# 793 "parser.ml"
               : File.file))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'd_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'i_list) in
    Obj.repr(
# 28 "parser.mly"
                                         (File(_2,Some(_4),_6))
# 802 "parser.ml"
               : 's_prime))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'i_list) in
    Obj.repr(
# 29 "parser.mly"
                                  (File(_2,None,_5))
# 810 "parser.ml"
               : 's_prime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'i) in
    Obj.repr(
# 33 "parser.mly"
     ([_1])
# 817 "parser.ml"
               : 'i_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'i) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'i_list) in
    Obj.repr(
# 34 "parser.mly"
           (_1::_2)
# 825 "parser.ml"
               : 'i_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'd) in
    Obj.repr(
# 37 "parser.mly"
     ([_1])
# 832 "parser.ml"
               : 'd_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'd) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'd_list) in
    Obj.repr(
# 38 "parser.mly"
           (_1::_2)
# 840 "parser.ml"
               : 'd_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 41 "parser.mly"
              ( Plus(_1,_3) )
# 848 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 42 "parser.mly"
              ( Fois(_1,_3) )
# 856 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 43 "parser.mly"
               ( Moins(_1,_3) )
# 864 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 44 "parser.mly"
             ( Div(_1,_3) )
# 872 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 45 "parser.mly"
                 ( _2 )
# 879 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 46 "parser.mly"
               ( Puiss(_1,_3) )
# 887 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 47 "parser.mly"
            ( Eq(_1,_3) )
# 895 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 48 "parser.mly"
             ( Neq(_1,_3) )
# 903 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 49 "parser.mly"
               ( LessE(_1,_3) )
# 911 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 50 "parser.mly"
                ( GreatE(_1,_3) )
# 919 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 51 "parser.mly"
               ( LessT(_1,_3) )
# 927 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 52 "parser.mly"
                ( GreatT(_1,_3) )
# 935 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 53 "parser.mly"
             ( Mod(_1,_3) )
# 943 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 54 "parser.mly"
             ( Rem(_1,_3) )
# 951 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 55 "parser.mly"
             ( And(_1,_3) )
# 959 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 56 "parser.mly"
            ( Or(_1,_3) )
# 967 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 57 "parser.mly"
             ( Xor(_1,_3) )
# 975 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 58 "parser.mly"
                  ( AndThen(_1,_4) )
# 983 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 59 "parser.mly"
                 ( OrElse(_1,_4) )
# 991 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 60 "parser.mly"
             ( Nega(_2) )
# 998 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 61 "parser.mly"
           ( Abs(_2) )
# 1005 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 62 "parser.mly"
           ( Not(_2) )
# 1012 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 63 "parser.mly"
             ( Int(_1) )
# 1019 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 64 "parser.mly"
               ( Float(_1) )
# 1026 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
        ( Id(_1) )
# 1033 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'e_list) in
    Obj.repr(
# 66 "parser.mly"
                         ( ConvOuAppelFct(_1,_3) )
# 1041 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 69 "parser.mly"
     ([_1])
# 1048 "parser.ml"
               : 'e_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e_list) in
    Obj.repr(
# 70 "parser.mly"
               (_1::_3)
# 1056 "parser.ml"
               : 'e_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
        ( ForRange(_1) )
# 1063 "parser.ml"
               : 'choix_for))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 75 "parser.mly"
            ( ForExpr(_1,_3) )
# 1071 "parser.ml"
               : 'choix_for))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'i_list) in
    Obj.repr(
# 80 "parser.mly"
                         ( [(_2,_4)] )
# 1079 "parser.ml"
               : 'elsif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'i_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elsif_list) in
    Obj.repr(
# 81 "parser.mly"
                                    ( (_2,_4)::_5 )
# 1088 "parser.ml"
               : 'elsif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 84 "parser.mly"
       ( Expr(_1) )
# 1095 "parser.ml"
               : 'case_choix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 85 "parser.mly"
            ( Range(_1,_3) )
# 1103 "parser.ml"
               : 'case_choix))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
            ( Other )
# 1109 "parser.ml"
               : 'case_choix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_choix) in
    Obj.repr(
# 89 "parser.mly"
                ([_1])
# 1116 "parser.ml"
               : 'case_choix_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'case_choix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'case_choix_list) in
    Obj.repr(
# 90 "parser.mly"
                                    (_1::_3)
# 1124 "parser.ml"
               : 'case_choix_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'case_choix_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'i_list) in
    Obj.repr(
# 93 "parser.mly"
                                        (_1,_3)
# 1132 "parser.ml"
               : 'case_ligne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_ligne) in
    Obj.repr(
# 96 "parser.mly"
                ([_1])
# 1139 "parser.ml"
               : 'case_ligne_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case_ligne) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'case_ligne_list) in
    Obj.repr(
# 97 "parser.mly"
                                (_1::_2)
# 1147 "parser.ml"
               : 'case_ligne_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 101 "parser.mly"
                                    ( NullInstr(Some(_2)) )
# 1154 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 102 "parser.mly"
                                           ( Affect(Some(_2),_4,_6) )
# 1163 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'e_list) in
    Obj.repr(
# 103 "parser.mly"
                                         ( AppelProc(Some(_2),_4,_5) )
# 1172 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'i_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 104 "parser.mly"
                                                          ( Loop(Some(_2),Some(_4),_6,Some(_9)) )
# 1182 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'i_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 105 "parser.mly"
                                                                  ( While(Some(_2),Some(_4),_6,_8,Some(_11)) )
# 1193 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : 'choix_for) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : 'i_list) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 106 "parser.mly"
                                                                                      ( For(Some(_2),Some(_4),_6,true,_9,_11,Some(_14)) )
# 1205 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'choix_for) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'i_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 107 "parser.mly"
                                                                              ( For(Some(_2),Some(_4),_6,false,_8,_10,Some(_13)) )
# 1217 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'i_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'elsif_list) in
    Obj.repr(
# 109 "parser.mly"
                                                                  ( If(Some(_2),_5,_7,Some(_8),None) )
# 1227 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'i_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'i_list) in
    Obj.repr(
# 110 "parser.mly"
                                                                   ( If(Some(_2),_5,_7,None,Some(_9)) )
# 1237 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 8 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'i_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'elsif_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'i_list) in
    Obj.repr(
# 111 "parser.mly"
                                                                              ( If(Some(_2),_5,_7,Some(_8),Some(_10)) )
# 1248 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'i_list) in
    Obj.repr(
# 112 "parser.mly"
                                                       ( If(Some(_2),_5,_7,None,None) )
# 1257 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'case_ligne_list) in
    Obj.repr(
# 115 "parser.mly"
                                                                  ( Case(Some(_2),_5,_7) )
# 1266 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 116 "parser.mly"
                                       ( Goto(Some(_2),_5) )
# 1274 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 117 "parser.mly"
                                              ( Exit(Some(_2),Some(_5),Some(_7)) )
# 1283 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 118 "parser.mly"
                                    ( Exit(Some(_2),None,None) )
# 1290 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 119 "parser.mly"
                                      ( ReturnProc(Some(_2)) )
# 1297 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 120 "parser.mly"
                                        (ReturnFct(Some(_2),_5) )
# 1305 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
      ( Fin(_1) )
# 1312 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 125 "parser.mly"
                  ( List(_1,_3) )
# 1320 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parser.mly"
                  ( (Some(_3)) )
# 1327 "parser.ml"
               : 'obj_choix))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
               (None)
# 1333 "parser.ml"
               : 'obj_choix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
         ( Some(_2) )
# 1340 "parser.ml"
               : 'obj_choix))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
      (None)
# 1346 "parser.ml"
               : 'obj_choix))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
      ( Null )
# 1352 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
        ( In )
# 1358 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
         ( Out )
# 1364 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
            ( In_out )
# 1370 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mode) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parser.mly"
                      ( LastPara(_1,_3,_4) )
# 1379 "parser.ml"
               : 'parametre))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'mode) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'parametre) in
    Obj.repr(
# 141 "parser.mly"
                                     ( ParaList(_1,_3,_4,_6) )
# 1389 "parser.ml"
               : 'parametre))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
       (None)
# 1395 "parser.ml"
               : 'end_function))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 145 "parser.mly"
          ( Some(_2) )
# 1402 "parser.ml"
               : 'end_function))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'obj_choix) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 149 "parser.mly"
                                     ( Objet(_1,_2,Some(_4)) )
# 1411 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'obj_choix) in
    Obj.repr(
# 150 "parser.mly"
                            ( Objet(_1,_2,None) )
# 1419 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 151 "parser.mly"
                                  ( Type(_2,_5,_7) )
# 1428 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 152 "parser.mly"
                                        ( Sous_type(_2,_4,_6,_8) )
# 1438 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 153 "parser.mly"
                                   ( Rename(_1,_3,_5) )
# 1447 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parametre) in
    Obj.repr(
# 155 "parser.mly"
                                           ( Procedure(_2,Some(_4)) )
# 1455 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 156 "parser.mly"
                       ( Procedure(_2,None) )
# 1462 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'parametre) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 158 "parser.mly"
                                                    ( Function(_2,Some(_4),_7) )
# 1471 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 159 "parser.mly"
                                ( Function(_2,None,_4) )
# 1479 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'parametre) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'd_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'i_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'end_function) in
    Obj.repr(
# 161 "parser.mly"
                                                                               ( DefProcedure(_2,Some(_4),_7,_9,_10) )
# 1490 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'd_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'i_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'end_function) in
    Obj.repr(
# 162 "parser.mly"
                                                           ( DefProcedure(_2,None,_4,_6,_7) )
# 1500 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'parametre) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'd_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'i_list) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'end_function) in
    Obj.repr(
# 164 "parser.mly"
                                                                                        ( DefFunction(_2,Some(_4),_7,_9,_11,_12) )
# 1512 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'd_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'end_function) in
    Obj.repr(
# 165 "parser.mly"
                                                                    ( DefFunction(_2,None,_4,_6,_8,_9) )
# 1523 "parser.ml"
               : 'd))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : File.file)
